// Code generated by go-bindata.
// sources:
// files/disk_types.yml
// files/vm_types.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesDisk_typesYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\xcb\xca\x83\x30\x10\x46\xf7\x82\xef\x90\x9d\xab\x1f\x92\x98\xdb\xef\xcb\x48\xa9\x59\x48\x2f\x8a\xb6\x9b\x96\xbe\x7b\xc9\x54\xba\x70\xa6\xf0\x6d\x0f\x9c\x30\xdf\x21\x7f\xea\x7a\xb8\xe4\x4e\x35\x46\x5b\xd7\xd4\x95\x52\xc3\xb8\x9e\xfa\x75\x7c\xe4\x4e\x15\x56\xd0\xf1\x3c\xdd\x87\x7e\x5e\xa6\x39\x2f\xb7\x31\xaf\x9d\x7a\xbe\xea\xea\xab\x5a\xed\xd2\x5e\x2d\x0c\x50\xbd\xb1\x7a\xaf\x16\x06\xa8\xe5\x38\xe6\x12\x04\x4f\x66\x32\x41\x40\x6e\x75\xe4\x57\x13\x04\x17\x8b\x93\x11\x39\x86\xc4\x65\x82\x68\x30\xb9\x18\xa4\xfb\x36\x08\x3a\x51\xb4\xb8\x9c\x1c\x6e\x2e\x47\x87\xab\xcb\xd9\xe1\xee\x72\x78\xac\xbc\x4b\x3e\x06\x9e\x9e\x30\x14\xef\x3f\x1a\x6f\x79\x3d\xc2\xc8\x7e\xeb\x6c\xe2\x3f\x7e\xc3\xf8\x04\xe1\xfb\x7c\x38\xf2\x44\x88\x31\x5a\xc3\x33\x6c\xfc\xf7\x13\xef\x00\x00\x00\xff\xff\xd4\xf4\xd0\xb0\xa5\x04\x00\x00")

func filesDisk_typesYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesDisk_typesYml,
		"files/disk_types.yml",
	)
}

func filesDisk_typesYml() (*asset, error) {
	bytes, err := filesDisk_typesYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/disk_types.yml", size: 1189, mode: os.FileMode(420), modTime: time.Unix(1478126943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVm_typesYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\xd0\x41\x0a\x83\x30\x10\x85\xe1\xbd\xe0\x1d\x72\x81\x4a\xa3\xae\xdc\x15\x7a\x83\x1e\x40\x86\x64\x28\xa1\x49\x0c\x49\x84\xf6\xf6\xa5\x2d\x45\x30\xae\x9e\x6e\x67\xf1\xf1\xe6\x3f\x09\x4f\x8e\x07\xe1\xc9\x4f\x75\x25\x84\xb2\xd3\xac\xc7\x10\xa7\xc0\x31\x1b\x4e\xc3\xe7\x28\x84\xf1\x29\x93\x57\x3c\xe6\x57\xe0\x41\xdc\x32\x79\x4d\x51\x8f\x97\x73\x5d\xfd\x09\x67\x54\x84\x0c\xb9\x32\x9a\x48\x0e\x71\xda\xc5\x49\x8e\xac\x3d\xc2\x68\xb4\x49\x8f\x9d\x90\x63\x6d\x66\xe4\xa3\xab\x5c\x23\x8d\x63\x08\x2a\xd6\xa0\x7f\x6d\x48\x2a\xcc\x08\xd4\x2d\x90\xa5\x78\xe7\x9d\x63\xbe\x06\x9a\x47\xca\x35\x74\x40\x9e\x1f\xb4\xbf\xce\x13\xce\x53\x20\x70\x9f\xb6\x90\xd0\x40\xe5\x26\xb0\x50\xbf\x40\x2d\x9e\xa8\x54\xe0\x46\x5d\x49\xa1\x91\x36\x56\x81\x95\x64\x5f\x57\xef\x00\x00\x00\xff\xff\xdf\x04\x00\xa5\xe4\x05\x00\x00")

func filesVm_typesYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVm_typesYml,
		"files/vm_types.yml",
	)
}

func filesVm_typesYml() (*asset, error) {
	bytes, err := filesVm_typesYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vm_types.yml", size: 1508, mode: os.FileMode(420), modTime: time.Unix(1478038234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/disk_types.yml": filesDisk_typesYml,
	"files/vm_types.yml": filesVm_typesYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"disk_types.yml": &bintree{filesDisk_typesYml, map[string]*bintree{}},
		"vm_types.yml": &bintree{filesVm_typesYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

