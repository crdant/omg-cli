// Code generated by go-bindata.
// sources:
// files/disk_types.yml
// files/vm_types.yml
// DO NOT EDIT!

package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesDisk_typesYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xc1\x8e\x83\x20\x10\x86\xef\x3e\x05\x37\x4f\x9b\x00\x02\xc3\xfa\x32\x66\xb3\x9a\x2c\xd9\x56\x8d\xda\x43\xfb\xf4\x85\xa9\xe9\x81\xe1\xd0\xe1\xfa\xc5\x7c\x71\xfe\x4f\xbf\xc4\xfc\x73\x9d\x7a\xd1\x2a\xa9\x4d\xdb\x08\x31\x86\xfd\x7f\xd8\xc3\x23\xb2\x84\x22\xf9\xbd\x2c\xb7\x71\x58\xb7\x65\x9d\xb6\x23\x4c\x7b\x1f\x99\x10\xc7\x7d\x8d\x8f\x1c\x7f\x61\x6e\xde\x0e\x2d\x8d\xcf\x1c\x09\xb1\x1c\x56\x69\x99\x39\x12\x62\x39\xd2\x8b\xe7\x12\x64\xec\x6b\x72\x0b\x32\x96\xa5\x93\x40\x0e\x42\xc6\x5e\xa5\x34\x0b\xcf\x02\xce\x13\x0b\x32\xfe\xba\xc5\x79\x99\x1e\xdb\x39\xea\x41\xc8\xef\x54\x0c\x55\x51\xaa\x98\xaa\xa2\x55\x31\x56\x45\xad\x62\x2e\x6e\x2f\xe3\x2d\x38\x12\x0c\x29\x73\xe9\x6f\x50\x56\x93\xa9\x91\xf2\x36\xd2\x46\x7b\xf2\x77\x9d\xb4\xe6\x3a\xfa\x3d\xbe\x30\xcf\xe5\x00\x40\x2b\x32\xd5\x89\x3f\x71\x3d\x03\x00\x00\xff\xff\x83\x17\xfb\x36\x50\x05\x00\x00")

func filesDisk_typesYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesDisk_typesYml,
		"files/disk_types.yml",
	)
}

func filesDisk_typesYml() (*asset, error) {
	bytes, err := filesDisk_typesYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/disk_types.yml", size: 1360, mode: os.FileMode(420), modTime: time.Unix(1474605901, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesVm_typesYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x6d\x6a\x84\x30\x10\x86\xff\xef\x29\x72\x81\x8a\x19\xc7\x6c\xd6\xcb\x14\xd1\x50\xa4\x66\x95\x58\xc1\xe3\xd7\x26\x94\xb2\xd9\x1d\x67\xec\x1f\xf1\x6b\x1e\xde\xf7\x19\x7d\x53\xf7\xd6\xbb\x66\x3f\xde\xa7\x8b\x52\xdd\x38\xad\xfd\xfb\x1c\xa6\xd9\x85\xaf\xc1\x2d\xcd\x7e\x4f\xa9\xd0\xfa\x46\xd5\x1a\xe2\x45\x37\xaf\x8d\xd2\xf1\xb4\x1f\x96\xcf\x46\x59\x7d\x83\xcb\x2f\xc7\x0f\x5d\x60\x40\xba\x04\x94\x92\x8a\x7d\xe2\x0c\x0d\x28\xda\xe2\xdb\x71\x3c\x26\x41\x89\x56\x90\x2b\x92\x8a\x9f\x07\xff\xc5\x69\x53\x59\xfc\xeb\xe9\xfa\x61\x65\x4a\x62\x79\x33\x82\x92\x09\x55\x78\xc7\xe0\xe2\x90\x60\x03\x09\xc7\x57\xa5\xe3\x55\x70\x35\x36\x07\xee\x6f\x9d\x51\x87\x54\xbe\xb1\x0d\x1f\xee\x4c\x53\x20\x97\x10\x51\xbc\xb8\x34\x24\x58\x6a\xe2\xf1\xe6\xe8\x7c\xa6\xae\x2b\x93\xf1\x58\x71\x8f\x8b\x40\x32\xde\x26\x50\x97\x75\x45\x72\xab\x9b\x50\x5e\x9a\x12\x7c\x26\x9b\xd4\xde\x41\x44\x5d\xe9\xf2\x0a\x39\x92\x15\xf8\xb8\x0f\x4b\x46\x04\x89\xc1\xac\xb0\x25\xb7\x0b\x52\x85\x69\xec\x65\xe1\xd7\x44\xde\xe1\x41\x48\x30\xa0\x11\x9f\x98\xac\xc4\xfc\x2f\x31\x4f\x31\xbf\x03\x00\x00\xff\xff\x68\x3b\x90\x0f\x76\x06\x00\x00")

func filesVm_typesYmlBytes() ([]byte, error) {
	return bindataRead(
		_filesVm_typesYml,
		"files/vm_types.yml",
	)
}

func filesVm_typesYml() (*asset, error) {
	bytes, err := filesVm_typesYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/vm_types.yml", size: 1654, mode: os.FileMode(420), modTime: time.Unix(1474605189, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/disk_types.yml": filesDisk_typesYml,
	"files/vm_types.yml": filesVm_typesYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"disk_types.yml": &bintree{filesDisk_typesYml, map[string]*bintree{}},
		"vm_types.yml": &bintree{filesVm_typesYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

